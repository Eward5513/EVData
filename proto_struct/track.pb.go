// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: track.proto

package proto_struct

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 轨迹点信息
type RawPoint struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Vin               int32                  `parquet:"id" protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                            // 车辆识别号
	Time             string                 `parquet:"time" protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`                                         // 采集时间戳
	Speed            float64                `parquet:"speed" protobuf:"fixed64,3,opt,name=speed,proto3" json:"speed,omitempty"`                                     // 日期
	Longitude        float64                `parquet:"longitude" protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`                             // 时间戳字符串
	Latitude         float64                `parquet:"latitude" protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`                               // 小时
	VehicleStatus    int32                  `parquet:"vehiclestatus" protobuf:"varint,6,opt,name=vehicle_status,json=vehicleStatus,proto3" json:"vehicle_status,omitempty"` // 速度
	HaveDriver       int32                  `parquet:"havedriver" protobuf:"varint,7,opt,name=have_driver,json=haveDriver,proto3" json:"have_driver,omitempty"`          // 经度
	HaveBrake        int32                  `parquet:"havebrake" protobuf:"varint,8,opt,name=have_brake,json=haveBrake,proto3" json:"have_brake,omitempty"`             // 纬度
	AcceleratorPedal int32                  `parquet:"acceleratorpedal" protobuf:"varint,9,opt,name=accelerator_pedal,json=acceleratorPedal,proto3" json:"accelerator_pedal,omitempty"`
	BrakeStatus      int32                  `parquet:"brakestatus" protobuf:"varint,10,opt,name=brake_status,json=brakeStatus,proto3" json:"brake_status,omitempty"`
	TimeInt          int64                  `protobuf:"varint,11,opt,name=time_int,json=timeInt,proto3" json:"time_int,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RawPoint) Reset() {
	*x = RawPoint{}
	mi := &file_track_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawPoint) ProtoMessage() {}

func (x *RawPoint) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawPoint.ProtoReflect.Descriptor instead.
func (*RawPoint) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{0}
}

func (x *RawPoint) GetVin() int32 {
	if x != nil {
		return x.Vin
	}
	return 0
}

func (x *RawPoint) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *RawPoint) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *RawPoint) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *RawPoint) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *RawPoint) GetVehicleStatus() int32 {
	if x != nil {
		return x.VehicleStatus
	}
	return 0
}

func (x *RawPoint) GetHaveDriver() int32 {
	if x != nil {
		return x.HaveDriver
	}
	return 0
}

func (x *RawPoint) GetHaveBrake() int32 {
	if x != nil {
		return x.HaveBrake
	}
	return 0
}

func (x *RawPoint) GetAcceleratorPedal() int32 {
	if x != nil {
		return x.AcceleratorPedal
	}
	return 0
}

func (x *RawPoint) GetBrakeStatus() int32 {
	if x != nil {
		return x.BrakeStatus
	}
	return 0
}

func (x *RawPoint) GetTimeInt() int64 {
	if x != nil {
		return x.TimeInt
	}
	return 0
}

type MatchingPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OriginalLon   float64                `protobuf:"fixed64,1,opt,name=original_lon,json=originalLon,proto3" json:"original_lon,omitempty"`
	OriginalLat   float64                `protobuf:"fixed64,2,opt,name=original_lat,json=originalLat,proto3" json:"original_lat,omitempty"`
	MatchedLon    float64                `protobuf:"fixed64,3,opt,name=matched_lon,json=matchedLon,proto3" json:"matched_lon,omitempty"`
	MatchedLat    float64                `protobuf:"fixed64,4,opt,name=matched_lat,json=matchedLat,proto3" json:"matched_lat,omitempty"`
	RoadId        int64                  `protobuf:"varint,5,opt,name=road_id,json=roadId,proto3" json:"road_id,omitempty"`
	IsBad         int32                  `protobuf:"varint,6,opt,name=isBad,proto3" json:"isBad,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchingPoint) Reset() {
	*x = MatchingPoint{}
	mi := &file_track_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchingPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingPoint) ProtoMessage() {}

func (x *MatchingPoint) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingPoint.ProtoReflect.Descriptor instead.
func (*MatchingPoint) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{1}
}

func (x *MatchingPoint) GetOriginalLon() float64 {
	if x != nil {
		return x.OriginalLon
	}
	return 0
}

func (x *MatchingPoint) GetOriginalLat() float64 {
	if x != nil {
		return x.OriginalLat
	}
	return 0
}

func (x *MatchingPoint) GetMatchedLon() float64 {
	if x != nil {
		return x.MatchedLon
	}
	return 0
}

func (x *MatchingPoint) GetMatchedLat() float64 {
	if x != nil {
		return x.MatchedLat
	}
	return 0
}

func (x *MatchingPoint) GetRoadId() int64 {
	if x != nil {
		return x.RoadId
	}
	return 0
}

func (x *MatchingPoint) GetIsBad() int32 {
	if x != nil {
		return x.IsBad
	}
	return 0
}

// 完整轨迹信息
type Track struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vin           int32                  `protobuf:"varint,1,opt,name=vin,proto3" json:"vin,omitempty"`                  // 车辆识别号
	Tid           int32                  `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`                  // 轨迹ID
	Mps           []*MatchingPoint       `protobuf:"bytes,3,rep,name=mps,proto3" json:"mps,omitempty"`                   // 轨迹点列表
	Probability   float64                `protobuf:"fixed64,4,opt,name=probability,proto3" json:"probability,omitempty"` // 概率值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Track) Reset() {
	*x = Track{}
	mi := &file_track_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_track_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_track_proto_rawDescGZIP(), []int{2}
}

func (x *Track) GetVin() int32 {
	if x != nil {
		return x.Vin
	}
	return 0
}

func (x *Track) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Track) GetMps() []*MatchingPoint {
	if x != nil {
		return x.Mps
	}
	return nil
}

func (x *Track) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

var File_track_proto protoreflect.FileDescriptor

const file_track_proto_rawDesc = "" +
	"\n" +
	"\vtrack.proto\x12\x05track\"\xd2\x02\n" +
	"\bRawPoint\x12\x10\n" +
	"\x03vin\x18\x01 \x01(\x05R\x03vin\x12\x12\n" +
	"\x04time\x18\x02 \x01(\tR\x04time\x12\x14\n" +
	"\x05speed\x18\x03 \x01(\x01R\x05speed\x12\x1c\n" +
	"\tlongitude\x18\x04 \x01(\x01R\tlongitude\x12\x1a\n" +
	"\blatitude\x18\x05 \x01(\x01R\blatitude\x12%\n" +
	"\x0evehicle_status\x18\x06 \x01(\x05R\rvehicleStatus\x12\x1f\n" +
	"\vhave_driver\x18\a \x01(\x05R\n" +
	"haveDriver\x12\x1d\n" +
	"\n" +
	"have_brake\x18\b \x01(\x05R\thaveBrake\x12+\n" +
	"\x11accelerator_pedal\x18\t \x01(\x05R\x10acceleratorPedal\x12!\n" +
	"\fbrake_status\x18\n" +
	" \x01(\x05R\vbrakeStatus\x12\x19\n" +
	"\btime_int\x18\v \x01(\x03R\atimeInt\"\xc6\x01\n" +
	"\rMatchingPoint\x12!\n" +
	"\foriginal_lon\x18\x01 \x01(\x01R\voriginalLon\x12!\n" +
	"\foriginal_lat\x18\x02 \x01(\x01R\voriginalLat\x12\x1f\n" +
	"\vmatched_lon\x18\x03 \x01(\x01R\n" +
	"matchedLon\x12\x1f\n" +
	"\vmatched_lat\x18\x04 \x01(\x01R\n" +
	"matchedLat\x12\x17\n" +
	"\aroad_id\x18\x05 \x01(\x03R\x06roadId\x12\x14\n" +
	"\x05isBad\x18\x06 \x01(\x05R\x05isBad\"u\n" +
	"\x05Track\x12\x10\n" +
	"\x03vin\x18\x01 \x01(\x05R\x03vin\x12\x10\n" +
	"\x03tid\x18\x02 \x01(\x05R\x03tid\x12&\n" +
	"\x03mps\x18\x03 \x03(\v2\x14.track.MatchingPointR\x03mps\x12 \n" +
	"\vprobability\x18\x04 \x01(\x01R\vprobabilityB\x10Z\x0e.;proto_structb\x06proto3"

var (
	file_track_proto_rawDescOnce sync.Once
	file_track_proto_rawDescData []byte
)

func file_track_proto_rawDescGZIP() []byte {
	file_track_proto_rawDescOnce.Do(func() {
		file_track_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_track_proto_rawDesc), len(file_track_proto_rawDesc)))
	})
	return file_track_proto_rawDescData
}

var file_track_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_track_proto_goTypes = []any{
	(*RawPoint)(nil),      // 0: track.RawPoint
	(*MatchingPoint)(nil), // 1: track.MatchingPoint
	(*Track)(nil),         // 2: track.Track
}
var file_track_proto_depIdxs = []int32{
	1, // 0: track.Track.mps:type_name -> track.MatchingPoint
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_track_proto_init() }
func file_track_proto_init() {
	if File_track_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_track_proto_rawDesc), len(file_track_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_track_proto_goTypes,
		DependencyIndexes: file_track_proto_depIdxs,
		MessageInfos:      file_track_proto_msgTypes,
	}.Build()
	File_track_proto = out.File
	file_track_proto_goTypes = nil
	file_track_proto_depIdxs = nil
}
